%idwt           Single level discrete 3-D inverse wavelet transform.
%
%   N/I rec = idwt3(AAA, AAD, ADA, ADD, DAA, DAD, DDA, DDD, wavelet)
%   rec = idwt3(AAA, details, wavelet)
%   rec = idwt3(coefCube, wavelet)
%
%   AAA ... DDD The approximation and detail cubes, the three characters
%               represent how the approximation and detail filters are applied.
%               The first character represents the filter applied along the
%               rows, the second represents the columns filter and the third
%               character is for the plane filter.
%
%   rec         The reconstructed data cube
%
%   'wavelet'   The wavelet to use.
%
%
%   dwt3 computes the inverse 3 dimensional separable wavelet transform of the
%   supplied approximation and detail cubes.
%
%   Calls: idwt2, idwt, 
%
%   Bugs: if any dimension of the original cube was odd then reconstruction
%         will contain an extra sample at the end of that dimension

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  $Author: rickg $
%
%  $Date: 2004/03/05 00:58:54 $
%
%  $Revision: 1.1 $
%
%  $Log: idwt3.m,v $
%  Revision 1.1  2004/03/05 00:58:54  rickg
%  *** empty log message ***
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function rec = idwt3(varargin);

if nargin == 2
  coefCube = varargin{1}
  approx = coefCube.AAA;
  wavelet = varargin{2};
end

if nargin == 3
  approx = varargin{1};
  coefCube = varargin{2};
  wavelet = varargin{3};
end

% Precompute the filter coefficients
[loRecon hiRecon] = wfilters(wavelet, 'r');

% Compute the 1D IDWT along the plane dimension for each image element
% Implementation note: if the approx was generated by reconstruction from
% a coarser scale it may have extra coeffecients due to the odd length
% DWT - IDWT problem.  Thus all sizes are should be based on the detail coeffs
nRows = size(coefCube.AAD, 1);
nColumns = size(coefCube.AAD, 2);
nPlanes = size(coefCube.AAD, 3);
for iRow = nRows:-1:1
  for iCol = nColumns:-1:1
    aa(iRow, iCol, :) = idwt(approx(iRow, iCol, 1:nPlanes), ...
                             coefCube.AAD(iRow, iCol, :), loRecon, hiRecon);
    ad(iRow, iCol, :) = idwt(coefCube.ADA(iRow, iCol, 1:nPlanes), ...
                             coefCube.ADD(iRow, iCol, :), loRecon, hiRecon);
    da(iRow, iCol, :) = idwt(coefCube.DAA(iRow, iCol, 1:nPlanes), ...
                             coefCube.DAD(iRow, iCol, :), loRecon, hiRecon);
    dd(iRow, iCol, :) = idwt(coefCube.DDA(iRow, iCol, 1:nPlanes), ...
                             coefCube.DDD(iRow, iCol, :), loRecon, hiRecon);
  end
end

% Compute the 2D IDWT for each plane
nPlanes = size(aa, 3);

for iPlane = nPlanes:-1:1
  [rec(:,:,iPlane)] = ...
      idwt2(aa(:,:,iPlane), ad(:,:,iPlane), da(:,:,iPlane), dd(:,:,iPlane), ...
            loRecon, hiRecon);
end
